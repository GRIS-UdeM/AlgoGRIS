# Taken from https://github.com/sudara/pamplejuce/tree/main
# But with most things removed as they aren't needed for a library
name: AlgoGRIS Build & Test

on:
  workflow_dispatch: # lets you run a build from the UI
  push:
  pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1

defaults:
  run:
    shell: bash

jobs:
  build_and_test:
    # don't double run on PRs
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: Linux (Benchmarks)
            os: [ benchmarks ]
            extra-flags: -G"Ninja Multi-Config" -DCMAKE_C_FLAGS="-fsanitize=address -fsanitize=undefined"  -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined"
          - name: Linux (GCC)
            os: ubuntu-latest
            extra-flags: -DCMAKE_C_COMPILER=gcc-14 -DCMAKE_CXX_COMPILER=g++-14 -G"Ninja Multi-Config" -DCMAKE_C_FLAGS="-fsanitize=address -fsanitize=undefined"  -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined"
            packages: gcc-14
          - name: Linux (Clang)
            os: ubuntu-latest
            extra-flags: -DCMAKE_C_COMPILER=clang-19 -DCMAKE_CXX_COMPILER=clang++-19 -G"Ninja Multi-Config" -DCMAKE_C_FLAGS="-fsanitize=address -fsanitize=undefined"  -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined"
            packages: clang-19 libclang-rt-19-dev
          - name: macOS
            os: macos-15
            extra-flags: -G"Ninja Multi-Config" -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"  -DCMAKE_C_FLAGS=" -fsanitize=address -fsanitize=undefined" -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined"
          - name: Windows
            os: windows-latest

    steps:
      # Setup MSVC toolchain and developer command prompt (Windows)
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Install JUCE's Linux Deps
        if: runner.os == 'Linux'
        # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
        run: |
          sudo apt-get update -yqq
          sudo apt install -yqq libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.1-dev libglu1-mesa-dev xvfb ninja-build libcurl4-openssl-dev ${{ matrix.packages }}

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Install macOS Deps
        if: ${{ matrix.name == 'macOS' }}
        run: brew install ninja osxutils

      - name: Use latest Xcode on system (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache the build
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Configure
        run: |
          cmake -S . \
                -B build \
                -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                ${{ matrix.extra-flags }}

      #TODO VB: PUT BACK
      # - name: Build debug
      #   run: cmake --build build --config Debug --parallel

      - name: Build release
        run: cmake --build build --config Release --parallel

      - name: Test
        working-directory: build
        run: ctest --verbose --output-on-failure

      - name: Benchmark (ran on our local linux runner)
        if: matrix.name == 'Linux'
        working-directory: build
        run: |
          mkdir -p benchmarks/${RUNNER_OS}

          ./Release/test_spatAlgorithms --reporter xml --out benchmarks/${RUNNER_OS}/${{ github.sha }}.xml

          echo "===== Benchmark XML Output ====="
          cat benchmarks/${RUNNER_OS}/${{ github.sha }}.xml
          echo "================================"

      - name: Commit benchmark results to benchmarks branch (only for Linux for now)
        if: matrix.name == 'Linux'
        run: |
          # Set up git account
          git config --global user.email "ci-bot@example.com"
          git config --global user.name "GitHub Actions"

          # Clone the `benchmarks` branch of this repo into a benchmarks_branch directory
          git clone --depth=1 --branch=benchmarks https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} benchmarks_branch

          # Create OS-specific subdirectory if it doesn't exist
          mkdir -p benchmarks_branch/benchmarks/${RUNNER_OS}

          # Copy current benchmark XML into the appropriate subdirectory
          TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)
          cp build/benchmarks/${RUNNER_OS}/${{ github.sha }}.xml benchmarks_branch/benchmarks/${RUNNER_OS}/${TIMESTAMP}_${{ github.sha }}.xml

          # Commit and push to the benchmarks branch
          cd benchmarks_branch
          git add .
          git commit -m "Add benchmark results for commit ${{ github.sha }} on ${RUNNER_OS}"
          git push origin benchmarks

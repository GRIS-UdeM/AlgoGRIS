# Taken from https://github.com/sudara/pamplejuce/tree/main
# But with most things removed as they aren't needed for a library
name: AlgoGRIS Build & Test

on:
  workflow_dispatch: # lets you run a build from the UI
  push:
  pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1

defaults:
  run:
    shell: bash

jobs:
  build_and_test:
    # don't double run on PRs
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest
            extra-flags: -G"Ninja Multi-Config" #-DCMAKE_C_FLAGS="-fsanitize=address -fsanitize=undefined"  -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined"

          - name: macOS
            os: macos-latest
            extra-flags: -G"Ninja Multi-Config" #-DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"  -DCMAKE_C_FLAGS=" -fsanitize=address -fsanitize=undefined" -DCMAKE_CXX_FLAGS="-fsanitize=address -fsanitize=undefined"

          - name: Windows
            os: windows-latest

    steps:
      # Setup MSVC toolchain and developer command prompt (Windows)
      - uses: ilammy/msvc-dev-cmd@v1

      # Use clang on Linux so we don't introduce a 3rd compiler (Windows and macOS use MSVC and Clang)
      - name: Set up Clang
        if: runner.os == 'Linux'
        uses: egor-tensin/setup-clang@v1

      - name: Install JUCE's Linux Deps
        if: runner.os == 'Linux'
        # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
        run: |
          sudo apt-get update && sudo apt install libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.1-dev libglu1-mesa-dev xvfb ninja-build libcurl4-openssl-dev

      - name: Install Ninja (Windows)
        if: runner.os == 'Windows'
        run: choco install ninja

      - name: Install macOS Deps
        if: ${{ matrix.name == 'macOS' }}
        run: brew install ninja osxutils

      - name: Use latest Xcode on system (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache the build
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Configure
        run: |
          cmake -S . \
                -B build \
                -DCMAKE_C_COMPILER_LAUNCHER=sccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
                ${{ matrix.extra-flags }}

      - name: Build debug
        run: cmake --build build --config Debug --parallel

      - name: Build release
        run: cmake --build build --config Release --parallel

      - name: ls
        run: ls -R

      - name: Test
        working-directory: build
        run: ctest --verbose --output-on-failure

      - name: Benchmark
        working-directory: build
        run: |
          mkdir -p benchmarks

          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ./test_spatAlgorithms.exe --reporter xml --out benchmarks/${{ github.sha }}.xml
          else
            ./test_spatAlgorithms --reporter xml --out benchmarks/${{ github.sha }}.xml
          fi

          echo "===== Benchmark XML Output ====="
          cat benchmarks/${{ github.sha }}.xml
          echo "================================"
